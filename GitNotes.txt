Hey Pollo, Issa, and Nancy. This txt is going to be sort of an introduction to using git. 
It's a little bit long but it'll be really useful in the long run! (I promise)

Well, what the hell is Git?

Git is an extremely useful tool for developers, artists, or any contributors to work on the same project "safely" and conveniently. 
It's used in many industries, but mostly in software development and game development. 

//////CONCEPT///////

The main idea is that we have a public repository (or repo for short) on the internet that we can all access and download onto our computers at anytime. 
When you want to change the repo for everyone, like adding texture files or animations, you update your changes up to the repo.
This way, whenever someone else downloads the repo they get the new version with your added files. 

This can of course be dangerous. If you delete everything in the repo and then update your changes up to git, everything will be gone!
But, hopefully this document will teach you everything you need to know about git well enough so that you won't run into any issues.
(and of course you can always just ask me or Luis for help if you're confused or want to double check something before pushing it onto the server)

By now, you should have downloaded github and TortoiseGit, and cloned the git repo onto your computer.
Github is the main software we use and TortoiseGit expands the functionality ever so slightly to make our lives a bit easier while using it. 

/////THE BASICS///////

Git has three main actions you can take: committing, pushing, and pulling.

"Committing" is just a fancy way of saying "saving."
You commit your changes to your own folder, but it's still local only to your machine.

"Pulling" means updating your own folder to match the repo online.
It's the opposite of pushing. Pulling means completely wiping your folder to match whatever is on the internet.
Be careful though, because if you haven't committed your changes they'll vanish! (and I've been there)

"Pushing" means updating the repo online to match the folder on your machine. This is where you can add/modify stuff to our repo. 
You can't push your changes without committing them first, kind of like how you can't exit a Word document without saving first. 
Also, every time you want to push, you should pull first. 
If you don't, you have the chance to create conflicts with our repo, can everyone is gonna have a bad time. 


////////EXAMPLE//////////

A simple example of using all 3 realistically:

At the beginning of a work session, you pull down from the repo because you want to make sure what you're working with is the most up to date version.
You add some files to our art folder online. You commit, to make sure that your progress is saved.
Then you push up your changes up to the repo that way everyone else can pull down your files and use them. Easy as pie! 

Just kidding. It took me forever to learn this shit. Anyways...

////////SOME SYMBOLS////////

You may notice that files and folders will have a small symbol on the bottom. A red exclamation point, a green checkmark, or a yellow exclamation point.
This symbol displays the status of the file. If it's a green checkmark, it means the file is unchanged. Everything should be green when you
pull down from the repo everytime. 

If it's a red exclamation point, it means that since you last pulled, you have uncommitted changes. Save your changes!
Once everything is not red, you can safely push up to the repo. 

Conceptually, that's everything. Git is just kind of a fancier Google Drive. It's a storage place for big files that anyone can access.
That being said, I haven't actually told you how to commit, push, or pull! Don't worry though, with TortoiseGit it's super easy.

///////COMMITTING//////////

To commit your changes, right click the outer most folder of the repo. You should see a option that says "Git Commit -> "master"...
Click it.
This should bring up a dialogue box. At the top, you should write a short message describing what you're adding or modifying.
This will help us keep track of changes over time in case we have to go back for some reason. 
For example, "Updated Willow sprites and added basic character idle animation." Short, sweet, and to the point. 
At the bottom, there's a section where it'll list all the files you're adding/modifying. 
Make sure that the files you want added or changed have the check mark boxed checked!
Now you're ready to hit that commit button at the bottom. Hopefully the next box will say "Success. " 
If it doesn't for some reason, we can figure it out together. 
Hit the close button. 
You've committed!
It'll get really easy over time, I promise.

///////PUSHING////////

Next we'll try pushing. 
Again, right click the outer most folder of our project. 
Navigate from TortoiseGit -> Push
From here, just hit ok and you're good! Easy.

///////PULLING////////

Let's pull.
Right click the outer most folder.
Navigate from TortoiseGit -> Pull
Hit ok! Look familiar?

It may take some time getting used to git, but it really is an incredible tool.

Good Luck! And don't remember to ask as many questions as you need to. 


 





